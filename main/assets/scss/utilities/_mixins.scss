// edit font rendering -> tip: use for light text on dark backgrounds
@mixin fontSmooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// crop top space on text elements - caused by line height
@mixin lhCrop($line-height, $capital-letter: 1) {
  &::before {
    content: "";
    display: block;
    height: 0;
    width: 0;
    margin-top: calc((#{$capital-letter} - #{$line-height}) * 0.5em);
  }
}

// CSS triangle
@mixin triangle($direction: up, $width: 12px, $color: red) {
  width: 0;
  height: 0;
  border: $width solid transparent;

  @if ($direction==left) {
    border-right-color: $color;
  }

  @else if($direction==right) {
    border-left-color: $color;
  }

  @else if($direction==down) {
    border-top-color: $color;
  }

  @else {
    border-bottom-color: $color;
  }
}

// reset user agent style
@mixin reset {
  background-color: transparent;
  padding: 0;
  border: 0;
  border-radius: 0;
  color: inherit;
  line-height: inherit;
  appearance: none;
}

// clear float container
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// --------------------------------
// Color functions
// --------------------------------

// define HSL color variable
@mixin defineColorHSL($color, $hue, $saturation, $lightness) {
  #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
  #{$color}-h: #{$hue};
  #{$color}-s: #{$saturation};
  #{$color}-l: #{$lightness};
}

// return color with different opacity value
@function alpha($color, $opacity) {
  $color: str-replace($color, "var(");
  $color: str-replace($color, ")");
  $color-h: var(#{$color + "-h"});
  $color-s: var(#{$color + "-s"});
  $color-l: var(#{$color + "-l"});
  @return hsla($color-h, $color-s, $color-l, $opacity);
}

// return color with different lightness value
@function lightness($color, $lightnessMultiplier) {
  $color: str-replace($color, "var(");
  $color: str-replace($color, ")");
  $color-h: var(#{$color + "-h"});
  $color-s: var(#{$color + "-s"});
  $color-l: var(#{$color + "-l"});
  @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)),
    $search,
    $replace);
  }

  @return $string;
}

// --------------------------------
// Accessibility
// --------------------------------

@mixin srHide {
  position: absolute;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
}

@mixin srShow {
  position: static;
  clip: auto;
  clip-path: none;
}

// --------------------------------
// Breakpoints
// --------------------------------

$breakpoints: (xs: 30rem,
// ~480px
sm: 37.5rem,
// ~600px
md: 64rem,
// ~1024px
lg: 80rem,
// ~1280px
xl: 90rem // ~1440px
) !default;

@mixin breakpoint($breakpoint, $logic: false) {
  @if ($logic) {
    @media #{$logic} and (min-width: map-get($map: $breakpoints, $key: $breakpoint)) {
      @content;
    }
  }

  @else {
    @media (min-width: map-get($map: $breakpoints, $key: $breakpoint)) {
      @content;
    }
  }
}


// --------------------------------
// Grid system based on CSS Grid + IE fallback
// --------------------------------

@mixin gridFallback($gap: null) {
  display: flex;
  flex-wrap: wrap;

  @if ($gap==null) {
    $gap: var(--space-md);
  }

  margin: calc(#{$gap} * -1) 0 0 calc(#{$gap} * -1);

  >* {
    padding: #{$gap} 0 0 #{$gap};
    background-clip: content-box;
  }

  @supports (grid-area: auto) {
    margin: 0;

    >* {
      padding: 0;
      max-width: none !important;
    }
  }
}

@mixin column($width) {
  @if unit($width) !="%" {
    $width: $width * 100%;
  }

  flex-basis: #{$width};
  max-width: #{$width};
}